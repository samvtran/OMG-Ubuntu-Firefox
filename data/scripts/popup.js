// Generated by CoffeeScript 1.3.3

/*
Copyright (C) 2012 Ohso Ltd

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements. You may obtain a
copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/


(function() {
  'use strict';

  var DB_VERSION, db, omgApp, omgFeed, omgUtil;

  omgFeed = "http://feeds.feedburner.com/d0od?format=xml";

  db = void 0;

  DB_VERSION = 1;

  if (typeof localStorage['unread'] === 'undefined') {
    localStorage['unread'] = 0;
  }

  if (typeof localStorage['pollInterval'] === 'undefined') {
    localStorage['pollInterval'] = 600000;
  }

  omgApp = angular.module('omgApp', ['omgUtil']);

  omgApp.controller('popupCtrl', [
    '$scope', 'databaseService', 'Articles', 'LocalStorage', 'Badge', function($scope, databaseService, Articles, LocalStorage, Badge) {
      var getArticlesOnTimeout;
      getArticlesOnTimeout = function() {
        return setTimeout(function() {
          console.log('Timeout running!');
          return databaseService.open().then(function(event) {
            return Articles.getLatestArticles().then(function() {
              return Articles.getArticles().then(function(articles) {
                Badge.notify();
                $scope.latestArticles = articles;
                return getArticlesOnTimeout();
              });
            });
          });
        }, localStorage['pollInterval']);
      };
      databaseService.open().then(function(event) {
        return Articles.getArticles().then(function(articles) {
          Badge.notify();
          $scope.latestArticles = articles;
          return getArticlesOnTimeout();
        });
      });
      $scope.markAsRead = function(index) {
        if ($scope.latestArticles[index].unread === true) {
          LocalStorage.decrement();
          $scope.latestArticles[index].unread = false;
          return db.transaction(['articles'], 'readwrite').objectStore('articles').put($scope.latestArticles[index]);
        }
      };
      $scope.markAllAsRead = function() {
        var article, _i, _len, _ref, _results;
        LocalStorage.reset();
        _ref = $scope.latestArticles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          article = _ref[_i];
          if (article.unread === true) {
            article.unread = false;
            _results.push(db.transaction(['articles'], 'readwrite').objectStore('articles').put(article));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      return $scope.refresh = function() {
        $scope.refreshing = true;
        return databaseService.open().then(function(event) {
          return Articles.getLatestArticles().then(function() {
            return Articles.getArticles().then(function(articles) {
              $scope.latestArticles = articles;
              return $scope.refreshing = false;
            });
          });
        });
      };
    }
  ]);

  omgUtil = angular.module('omgUtil', ['ngResource']);

  omgUtil.service('databaseService', [
    '$q', '$rootScope', function($q, $rootScope) {
      var createStores, open;
      open = function() {
        var deferred, request;
        deferred = $q.defer();
        if (typeof db !== "undefined") {
          deferred.resolve();
        }
        request = indexedDB.open('OMGUbuntu', DB_VERSION);
        request.onerror = function(event) {
          console.log("Couldn't open the database");
          return $rootScope.$apply(function() {
            return deferred.reject("Couldn't open the database");
          });
        };
        request.onsuccess = function(event) {
          db = request.result;
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        request.onupgradeneeded = function(event) {
          db = event.target.result;
          return createStores();
        };
        return deferred.promise;
      };
      createStores = function() {
        console.log("Creating stores");
        return db.createObjectStore("articles", {
          keyPath: "date"
        });
      };
      return {
        open: open
      };
    }
  ]);

  omgUtil.service('Articles', [
    '$q', '$rootScope', 'LocalStorage', 'databaseService', function($q, $rootScope, LocalStorage, databaseService) {
      var getArticles, getLatestArticles, _addArticle, _getArticlesFromDatabase;
      getLatestArticles = function() {
        var deferred, promises;
        deferred = $q.defer();
        promises = [];
        self.port.emit('getArticles', omgFeed);
        self.port.on('receivedArticles', function(response) {
          var addArticle, article, articleObj, articleXml, articles, data, _i, _len;
          data = $.parseXML(response);
          articles = $(data).find('rss').find('channel').find('item');
          for (_i = 0, _len = articles.length; _i < _len; _i++) {
            articleXml = articles[_i];
            article = $(articleXml);
            articleObj = {
              title: article.find('title').text(),
              summary: $('<div>' + article.find('description').text() + '</div>').text(),
              link: article.find('feedburner\\:origLink').text(),
              date: Date.parse(article.find('pubDate').text()),
              unread: true
            };
            addArticle = _addArticle(articleObj);
            promises.push(addArticle);
          }
          return $q.all(promises).then(function() {
            return deferred.resolve();
          });
        });
        return deferred.promise;
      };
      _addArticle = function(articleObj) {
        var addArticle, deferred;
        deferred = $q.defer();
        addArticle = db.transaction(['articles'], 'readwrite').objectStore('articles').add(articleObj);
        addArticle.onsuccess = function(event) {
          LocalStorage.increment();
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        addArticle.onerror = function(event) {
          $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      _getArticlesFromDatabase = function() {
        var articles, deferred, objectStore;
        deferred = $q.defer();
        articles = [];
        objectStore = db.transaction(['articles'], 'readonly').objectStore('articles');
        objectStore.openCursor(null, "prev").onsuccess = function(event) {
          var cursor;
          cursor = event.target.result;
          if (cursor) {
            if (articles.length < 20) {
              articles.push(cursor.value);
            } else {
              if (cursor.value.unread === true) {
                LocalStorage.decrement();
              }
              db.transaction(['articles'], 'readwrite').objectStore('articles')["delete"](cursor.key);
            }
            return cursor["continue"]();
          } else {
            return $rootScope.$apply(function() {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      getArticles = function() {
        var deferred, objectStore;
        deferred = $q.defer();
        objectStore = db.transaction(['articles'], 'readonly').objectStore('articles');
        objectStore.count().onsuccess = function(event) {
          if (event.target.result < 20) {
            return getLatestArticles().then(function() {
              return _getArticlesFromDatabase().then(function(articles) {
                return deferred.resolve(articles);
              });
            });
          } else {
            return _getArticlesFromDatabase().then(function(articles) {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      return {
        getArticles: getArticles,
        getLatestArticles: getLatestArticles
      };
    }
  ]);

  omgUtil.filter('truncate', function() {
    return function(input, count) {
      var final, i, truncated, truncatedTest, _i, _ref;
      final = input;
      if (typeof input === "undefined") {
        return "";
      }
      if (input.length <= count) {
        return final;
      }
      truncated = input.substring(0, count);
      if (truncated.substring(truncated.length - 1).match(/\s/)) {
        final = truncated;
      }
      if (input.substring(truncated.length, truncated.length + 1).match(/\s/)) {
        final = truncated;
      }
      for (i = _i = 1, _ref = truncated.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        truncatedTest = truncated.substring(truncated.length - i, truncated.length - (i - 1));
        if (truncatedTest.match(/\s/)) {
          final = truncated.substring(0, truncated.length - i);
          break;
        }
      }
      return final + "...";
    };
  });

  omgUtil.filter('uriEncode', function() {
    return function(input) {
      return encodeURIComponent(input);
    };
  });

  omgUtil.service('Badge', [
    function() {
      var notify;
      notify = function() {
        return self.port.emit('updateBadge', localStorage['unread']);
      };
      return {
        notify: notify
      };
    }
  ]);

  omgUtil.service('LocalStorage', [
    'Badge', function(Badge) {
      var decrement, increment, reset;
      increment = function() {
        localStorage['unread'] = parseInt(localStorage['unread']) + 1;
        return Badge.notify();
      };
      decrement = function() {
        if (localStorage['unread'] === "0") {
          return;
        }
        localStorage['unread'] = parseInt(localStorage['unread']) - 1;
        return Badge.notify();
      };
      reset = function() {
        localStorage['unread'] = 0;
        return Badge.notify();
      };
      return {
        increment: increment,
        decrement: decrement,
        reset: reset
      };
    }
  ]);

}).call(this);
